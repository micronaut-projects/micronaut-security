buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        jcenter()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails:grails-docs:$grailsVersion"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1'
        classpath "gradle.plugin.org.aim42:htmlSanityCheck:$htmlSanityCheckVersion"
        classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.2"
        classpath 'javax.xml.bind:jaxb-api:2.3.1'
        classpath "io.micronaut.docs:micronaut-docs-asciidoc-extensions:$micronautDocsVersion"
        classpath "io.micronaut.docs:micronaut-docs-gradle-plugins:$micronautDocsVersion", {
            exclude module:'shadow'
            exclude module:'plugin-shadow'
        }
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.15.0' apply false
    id 'com.github.ben-manes.versions' version '0.27.0'
}

apply plugin: 'org.aim42.htmlSanityCheck'

repositories {
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
    maven { url "https://repo.grails.org/grails/core" }
}

version project.projectVersion

ext {
    distInstallDir = file("$buildDir/dist-tmp")
    homeBinDir = file("bin")
    homeLibDir = file("lib")
    homeSrcDir = file("src")
}

subprojects { Project subproject ->

    version project.projectVersion
    group "io.micronaut"

    ext {
        userOrg = "grails"
        isGrailsPlugin = false
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    }

    repositories {
        maven { url "https://oss.jfrog.org/oss-snapshot-local" }
        maven { url "https://repo.grails.org/grails/core" }
        jcenter()
    }
    
    apply plugin: "groovy"
    apply plugin: "java"
    apply plugin: "io.spring.dependency-management"
    

    dependencyManagement {
        imports {
            mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
        }
    }
    
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    compileJava.options.compilerArgs.add '-parameters'
    compileTestJava.options.compilerArgs.add '-parameters'
    apply from:"https://raw.githubusercontent.com/micronaut-projects/micronaut-build/v1.0.0/publishing.gradle"
    
    
    jar {
        manifest {
            attributes('Automatic-Module-Name': "${subproject.group}.${subproject.name}".replaceAll('[^\\w\\.\\$_]', "_"))
            attributes('Implementation-Version': projectVersion)
            attributes('Implementation-Title': 'Micronaut')
        }
    }

    tasks.withType(Test) {
        jvmArgs '-Duser.country=US'
        jvmArgs '-Duser.language=en'
        testLogging {
            exceptionFormat = 'full'
        }
        afterSuite {
            System.out.print(".")
            System.out.flush()
        }

        reports.html.enabled = !System.getenv("TRAVIS")
        reports.junitXml.enabled = !System.getenv("TRAVIS")

        systemProperty "micronaut.cloud.platform", "OTHER"
    }

    configurations {
        documentation
        all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                String group = details.requested.group
                if (group == 'org.codehaus.groovy') {
                    details.useVersion(groovyVersion)
                }
            }
        }
    }
    
    dependencies {
        documentation "org.codehaus.groovy:groovy-templates:$groovyVersion"
        documentation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"

        annotationProcessor "io.micronaut:micronaut-inject-java"
        annotationProcessor "io.micronaut.docs:micronaut-docs-asciidoc-config-props:$micronautDocsVersion"
        annotationProcessor "io.micronaut:micronaut-graal"
        compile "io.micronaut:micronaut-inject"
        
        testCompile("org.spockframework:spock-core:${spockVersion}") {
            exclude module:'groovy-all'
        }
        testCompile "cglib:cglib-nodep:3.3.0"
        testCompile "org.objenesis:objenesis:3.1"

        testRuntime "ch.qos.logback:logback-classic:1.2.3"
        testCompile "org.codehaus.groovy:groovy-test:$groovyVersion"
    }

    task moveConfigProps() {
        group 'documentation'
        doLast {
            ant.mkdir(dir: "${rootProject.buildDir}/config-props")
            ant.move(file: "${subproject.buildDir}/classes/java/main/META-INF/config-properties.adoc", tofile: "${rootProject.buildDir}/config-props/${subproject.name}-config-properties.adoc", failonerror: false, quiet: true)
        }
    }

    task javaDocAtReplacement(type: io.micronaut.docs.JavaDocAtValueReplacementTask, dependsOn: moveConfigProps) {
        adocFile = new File("${rootProject.buildDir}/config-props/${subproject.name}-config-properties.adoc")
        rootProjectDir = rootProject.projectDir
    }

    task replaceAtLink(dependsOn: moveConfigProps) {
        group 'documentation'

        doLast {
            File file = new File("${rootProject.buildDir}/config-props/${subproject.name}-config-properties.adoc")
            if (file.exists()) {
                def atLinkReplacer = { String str ->
                    String newLine = str.substring(0, str.indexOf('{@link io.micronaut.'))
                    String sub = "api:" + str.substring(str.indexOf('{@link io.micronaut.') + '{@link io.micronaut.'.length())
                    newLine += sub.substring(0, sub.indexOf('}')) + '[]'
                    newLine += sub.substring(sub.indexOf('}') + '}'.length())
                    newLine
                }

                List<String> lines = file.readLines()
                List<String> outputLines = []
                for (String line : lines) {
                    String proccessedLine = line
                    while (proccessedLine.contains('{@link io.micronaut.')) {
                        proccessedLine = atLinkReplacer(proccessedLine)
                    }
                    outputLines << proccessedLine
                }
                file.text = outputLines.join('\n')
            }
        }
    }
    task processConfigProps(dependsOn: [replaceAtLink, javaDocAtReplacement]) {
        group 'documentation'
        ext {
            individualConfigPropsFolder = "${rootProject.buildDir}/generated/configurationProperties"
        }
        doFirst {
            if (!new File("${rootProject.buildDir}/generated").exists()) {
                new File("${rootProject.buildDir}/generated").mkdir()
            }
            if (!new File("${rootProject.buildDir}/generated/configurationProperties").exists()) {
                new File("${rootProject.buildDir}/generated/configurationProperties").mkdir()
            }
        }
        doLast {

            def f = new File("${rootProject.buildDir}/config-props/${subproject.name}-config-properties.adoc")
            if (f.exists()) {
                def lines = f.readLines()
                def separator = "<<<"
                List<String> accumulator = []
                String configurationPropertyName = ''
                for (String line : lines) {

                    if (line.startsWith('<a id="')) {
                        String sub = line.substring(line.indexOf('id="') + 'id="'.length())
                        sub = sub.substring(0, sub.indexOf('"'))
                        configurationPropertyName = sub
                    }
                    if (line == separator) {
                        File outputfile = new File("${individualConfigPropsFolder}/${configurationPropertyName}.adoc")
                        outputfile.createNewFile()
                        outputfile.text = accumulator.join('\n')
                        accumulator = []
                        configurationPropertyName = null
                    } else {
                        accumulator << line
                    }
                }
            }
        }
    }

    groovydoc {
        classpath += project.configurations.documentation
    }

    task allDeps(type: DependencyReportTask) {}

    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = 8.10
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')

        // Per submodule
        maxErrors = 1
        maxWarnings = 10

        showViolations = true
    }

    checkstyleTest.enabled = false
}

apply from: rootProject.file('gradle/docs.gradle')

allprojects {
    apply plugin: 'idea'

    idea {
        module {
            outputDir file('build/classes/java/main')
            testOutputDir file('build/classes/groovy/test')
        }
    }
    apply from: rootProject.file('gradle/license.gradle')

    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        forkEvery = 100
    }
}

htmlSanityCheck {
    sourceDir = new File("${rootProject.buildDir}/docs/")
    sourceDocuments = ["index.html"]

}
docs.finalizedBy(htmlSanityCheck)

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
